#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass extarticle
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 2.54cm
\rightmargin 2cm
\bottommargin 2.54cm
\secnumdepth 1
\tocdepth 1
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Errata for 
\shape italic
Introduction to High Performance Computing for Scientists and Engineers
\end_layout

\begin_layout Author
As determined by Tim Haines
\end_layout

\begin_layout Date
January 20, 2016
\end_layout

\begin_layout Standard
Text marked red is to be removed, and text marked green is to be added.
\end_layout

\begin_layout Section*
Chapter 2
\end_layout

\begin_layout Subsection
Section 2.5.3
\end_layout

\begin_layout Standard
The code in Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:program1"

\end_inset

 is similar to that shown on Page 60 of the text.
 The principle difference is the use of iterators as parameter arguments
 for the second version of the 
\shape italic
sprod
\shape default
 function.
 This was done to allow simple overload resolution.
 A pre-computed set of values was used to test each case to ensure correct
 outputs, and the two methods match with a percent difference of 
\begin_inset Formula $\sim10^{-5}$
\end_inset

 compared to a serial summation.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C,basicstyle={\scriptsize\ttfamily},showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

#include <vector>
\end_layout

\begin_layout Plain Layout

#include <fstream>
\end_layout

\begin_layout Plain Layout

#include <iostream>
\end_layout

\begin_layout Plain Layout

#include <iomanip>
\end_layout

\begin_layout Plain Layout

#include <cmath>
\end_layout

\begin_layout Plain Layout

#include <cstdlib>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

template <class T>
\end_layout

\begin_layout Plain Layout

T sprod(const std::vector<T> &a, const std::vector<T> &b) {
\end_layout

\begin_layout Plain Layout

	T result = T(0);
\end_layout

\begin_layout Plain Layout

	int s = a.size();
\end_layout

\begin_layout Plain Layout

	for(int i=0; i<s; ++i) {
\end_layout

\begin_layout Plain Layout

		result += a[i] * b[i];
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	return result;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

template <typename T, typename RandIter>
\end_layout

\begin_layout Plain Layout

T sprod(RandIter first1, RandIter last1, RandIter first2) {
\end_layout

\begin_layout Plain Layout

	T result = T(0);
\end_layout

\begin_layout Plain Layout

	size_t N = std::distance(first1,last1);
\end_layout

\begin_layout Plain Layout

	for(size_t i=0; i<N; ++i) {
\end_layout

\begin_layout Plain Layout

		result += *first1++ * *first2++;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	return result;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int main() {	
\end_layout

\begin_layout Plain Layout

	const int N = 100000;
\end_layout

\begin_layout Plain Layout

	std::vector<float> x(N), y(N);
\end_layout

\begin_layout Plain Layout

	std::ifstream fin("input.dat",std::ios::binary);
\end_layout

\begin_layout Plain Layout

	fin.read(reinterpret_cast<char*>(&x[0]),x.size()*sizeof(float));
\end_layout

\begin_layout Plain Layout

	std::copy(x.begin(),x.end(),y.begin());
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#ifdef VECTOR_SPROD
\end_layout

\begin_layout Plain Layout

	const float p = sprod(x,y);
\end_layout

\begin_layout Plain Layout

#else
\end_layout

\begin_layout Plain Layout

	const float p = sprod<float>(x.begin(),x.end(),y.begin());
\end_layout

\begin_layout Plain Layout

#endif
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	const float r = 33464.5;
\end_layout

\begin_layout Plain Layout

	const float pdiff = std::abs(p-r) / ((p + r)/ 2.0) * 100.0;
\end_layout

\begin_layout Plain Layout

	std::cout << "pdiff = " << std::setprecision(6) << pdiff << "%
\backslash
n";
\end_layout

\begin_layout Plain Layout

}
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:program1"

\end_inset

Example from Section 2.5.3
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Quote
\begin_inset Quotes eld
\end_inset

Although this looks simple enough to be inlined efficiently, current compilers
 refuse to apply SIMD vectorization to the summation loop above.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
Experimenting with gcc-4.4.3 (released January 21, 2010), I found that the
 set of switches in Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:g++-switches"

\end_inset

 produced SIMD vectorized code for the overloaded index operator case from
 Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:program1"

\end_inset

.
 The assembly code is shown in Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:program1_asm"

\end_inset

.
 Using the same set of switches, gcc generated identical assembly code for
 the iterator version of the code.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\small\ttfamily}"
inline false
status open

\begin_layout Plain Layout
\align center

g++ -std=c++98 -O3 -msse4 -mfpmath=sse -ffast-math -mavx -march=core2
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:g++-switches"

\end_inset

Command line switches used to compile the code in Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:program1"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset

Puzzlingly, this same set of switches was needed to get gcc to vectorize
 the iterator-based version.
 The critical switch is -ffast-math which enables -funsafe-math-optimizations;
 without which, gcc refused to allow the out-of-order floating point calculation
s necessary for the AVX instruction set.
 In the text, you mention that you were able to get this to version to vectorize.
 What compiler and switches were you using?
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "numbers=left,basicstyle={\small\ttfamily},tabsize=4"
inline false
status open

\begin_layout Plain Layout

80492c0:	c5 f8 10 12      vmovups xmm2,XMMWORD PTR [edx]
\end_layout

\begin_layout Plain Layout

80492c4:	c5 f8 10 09      vmovups xmm1,XMMWORD PTR [ecx]
\end_layout

\begin_layout Plain Layout

80492c8:	40               inc    eax
\end_layout

\begin_layout Plain Layout

80492c9:	c5 e8 59 c9      vmulps xmm1,xmm2,xmm1
\end_layout

\begin_layout Plain Layout

80492cd:	83 c1 10         add    ecx,0x10
\end_layout

\begin_layout Plain Layout

80492d0:	83 c2 10         add    edx,0x10
\end_layout

\begin_layout Plain Layout

80492d3:	c5 f8 58 c1      vaddps xmm0,xmm0,xmm1
\end_layout

\begin_layout Plain Layout

80492d7:	39 c7			 cmp    edi,eax
\end_layout

\begin_layout Plain Layout

80492d9:	77 e5            ja     80492c0 <main+0x270>
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:program1_asm"

\end_inset

Code generated by gcc-4.4.3 using switches from Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:g++-switches"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section*
Chapter 8
\end_layout

\begin_layout Subsection*
Section 8.4.2
\end_layout

\begin_layout Standard
Line 26 of Listing 8.1
\end_layout

\begin_layout Quotation

\family typewriter
return static_cast<pointer>(
\strikeout on
\color red
m
\strikeout default
\color green
p
\color inherit
);
\end_layout

\begin_layout Standard
The need to construct a NUMA-aware allocator can be ellided by using 
\family typewriter
std::vector<T>::reserve()
\family default
 as it uses placement new atop a 
\family typewriter
char*
\family default
 buffer.
 I have verified that the code in Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:NUMA"

\end_inset

 works when compiled with gcc-4.4.3 using -std=c++0x.
 Assuming the threads only touch elements of 
\family typewriter
vf
\family default
 that belong to their NUMA domain, then the first-touch policy will be maintaine
d.
 
\begin_inset listings
lstparams "language={C++},basicstyle={\small\ttfamily},showstringspaces=false,tabsize=4"
inline false
status open

\begin_layout Plain Layout

#include <vector>
\end_layout

\begin_layout Plain Layout

#include <iostream>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

struct foo {
\end_layout

\begin_layout Plain Layout

    int i;
\end_layout

\begin_layout Plain Layout

    foo(int j) : i{j} { std::cout << "constructed: " << j << std::endl;
 }
\end_layout

\begin_layout Plain Layout

    foo() = delete;
\end_layout

\begin_layout Plain Layout

    foo(const foo&) = delete;
\end_layout

\begin_layout Plain Layout

    foo(foo &&rhs) { i = rhs.i; std::cout << "move constructed: " << i <<
 std::endl; }
\end_layout

\begin_layout Plain Layout

    foo& operator=(const foo&) = delete;
\end_layout

\begin_layout Plain Layout

    foo& operator=(foo&& rhs) { i = rhs.i; std::cout << "move assigned: "
 << i << std::endl; return *this; }
\end_layout

\begin_layout Plain Layout

    ~foo() { std::cout << "destructed: " << i << std::endl; }
\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int main() {
\end_layout

\begin_layout Plain Layout

    std::vector<foo> vf;
\end_layout

\begin_layout Plain Layout

    vf.reserve(100);
\end_layout

\begin_layout Plain Layout

    vf.emplace_back(3);
\end_layout

\begin_layout Plain Layout

    std::cout << vf[0].i << std::endl;
\end_layout

\begin_layout Plain Layout

}
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:NUMA"

\end_inset

NUMA-oblivious, but first-touch compatible, use of std::vector
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section*
Chapter 10
\end_layout

\begin_layout Subsection*
Section 10.4.1
\end_layout

\begin_layout Standard
There is a small typo on page 246.
\end_layout

\begin_layout Quotation
\begin_inset Quotes eld
\end_inset

Under the assumption that intranode connections come at a low cost, the
 efficiency of next-neighbor communications (e.g., ghost layer exchange) is
 determined by the maximum number of internode connection
\color green
s
\color inherit
 per node.
\begin_inset Quotes erd
\end_inset


\end_layout

\end_body
\end_document
